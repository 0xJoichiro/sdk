before_script:
  - |
    # Execute the before_script section
    echo -e "\e[0Ksection_end:$(date +%s):pre_clone_script\r\e[0K"  # first close pre_clone_script section, if open

    # Start the (collapsed) before_script section
    set -eExuo pipefail
    echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

    date +%s > "/tmp/job_start_date_${CI_JOB_ID:-}"
    # date -Iseconds is not supported by BSD date (macOS)
    date +"%Y-%m-%dT%H:%M:%S%z" > "/tmp/job_start_iso_date_${CI_JOB_ID:-}"
    date
    command -v ssh-agent > /dev/null
    test -z "${SSH_AUTH_SOCK:-}" && { eval "$(ssh-agent -s)"; ssh-add - <<< "${SSH_PRIVATE_KEY}"; }
    mkdir -p ~/.ssh
    chmod 0700 ~/.ssh

    echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
    ulimit -n 8192
    date

    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
    cd "${CI_PROJECT_DIR}"
    # Ensure file permissions in the repo are what git expects them to be
    git config --global core.fileMode true
    git reset --hard HEAD

  - echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"

# Run SDK tests against the upstream DFINITY repo.
#
# Typically this job is triggered from an upstream pipeline in the DFINITY
# repo, but this job can still be run manually from within the GitLab pipeline UI.
#
# The following variables indicate which branch and commit in the DFINITY repo to run
# the SDK tests against.
#
#   SDK_TEST_BRANCH_NAME:
#     The branch name in the dfinity repo.
#   SDK_TEST_COMMIT_SHA:
#     The git commit hash.
#
sdk_test:
  stage: test
  tags:
    - cd
  rules:
    # Only trigger this job from upstream pipelines or manual execution
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    ./scripts/run_sdk_test.sh
  artifacts:
    when: always
    paths:
      - $CI_JOB_STAGE/$CI_JOB_NAME

sdk_build:
  stage: build
  tags:
    - dfinity
    - ubuntu
    - docker
  script: |
    export DFX_ASSETS="$(nix-build assets.nix)"
    cargo build --release

stages:
  - build
  - test
